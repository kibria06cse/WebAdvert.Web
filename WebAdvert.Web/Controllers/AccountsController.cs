using Amazon.Extensions.CognitoAuthentication;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using WebAdvert.Web.Models.Accounts;

namespace WebAdvert.Web.Controllers
{
    public class AccountsController : Controller
    {
        private readonly SignInManager<CognitoUser> _signInManager;
        private readonly UserManager<CognitoUser> _userManager;
        private readonly CognitoUserPool _pool;

        public AccountsController(SignInManager<CognitoUser> signInManager, UserManager<CognitoUser> userManager, CognitoUserPool pool)
        {
            this._signInManager = signInManager;
            this._userManager = userManager;
            this._pool = pool;
        }
        public async Task<IActionResult> Signup()
        {
            return View();
        }

       [HttpPost]
        public async Task<IActionResult> Signup(SignupModel model)
        {
            if (ModelState.IsValid)
            {
                var user = _pool.GetUser(model.Email);

                // we have name attribute required. At the moment, we dont have a name passed in, so we can use the email temporarily.
                // user will not be null even if it does not exist.
                user.Attributes.Add("name", model.Email);
                // without second parameter, a new user is created with password autogenerated. 
                // if is user exists, it will fail here.
                var createResult = await _userManager.CreateAsync(user, model.Password);

                if (createResult.Succeeded)
                {
                    var confirmModel = new ConfirmModel
                    {
                        Email = model.Email,
                        Code = string.Empty
                    };

                    RedirectToAction("Confirm", confirmModel);
                }

                foreach (var item in createResult.Errors)
                    ModelState.AddModelError(item.Code, item.Description);
            }

            return View(model);
        }
    }
}
